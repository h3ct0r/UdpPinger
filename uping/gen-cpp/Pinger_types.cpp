/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Pinger_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace facebook { namespace netnorad { namespace thrift {


TargetList::~TargetList() throw() {
}


void TargetList::__set_target_list(const std::vector<Target> & val) {
  this->target_list = val;
}

uint32_t TargetList::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->target_list.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->target_list.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->target_list[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.target_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TargetList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TargetList");

  xfer += oprot->writeFieldBegin("target_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->target_list.size()));
    std::vector<Target> ::const_iterator _iter5;
    for (_iter5 = this->target_list.begin(); _iter5 != this->target_list.end(); ++_iter5)
    {
      xfer += (*_iter5).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TargetList &a, TargetList &b) {
  using ::std::swap;
  swap(a.target_list, b.target_list);
  swap(a.__isset, b.__isset);
}

TargetList::TargetList(const TargetList& other6) {
  target_list = other6.target_list;
  __isset = other6.__isset;
}
TargetList& TargetList::operator=(const TargetList& other7) {
  target_list = other7.target_list;
  __isset = other7.__isset;
  return *this;
}
void TargetList::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TargetList(";
  out << "target_list=" << to_string(target_list);
  out << ")";
}


Target::~Target() throw() {
}


void Target::__set_hostname(const std::string& val) {
  this->hostname = val;
}

void Target::__set_clustertype(const std::string& val) {
  this->clustertype = val;
}

void Target::__set_ignore(const bool val) {
  this->ignore = val;
}

void Target::__set_cluster(const std::string& val) {
  this->cluster = val;
}

void Target::__set_v4(const std::string& val) {
  this->v4 = val;
}

void Target::__set_v6(const std::string& val) {
  this->v6 = val;
}

void Target::__set_pod(const std::string& val) {
  this->pod = val;
}

void Target::__set_rack(const std::string& val) {
  this->rack = val;
}

uint32_t Target::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hostname);
          this->__isset.hostname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->clustertype);
          this->__isset.clustertype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ignore);
          this->__isset.ignore = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cluster);
          this->__isset.cluster = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->v4);
          this->__isset.v4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->v6);
          this->__isset.v6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pod);
          this->__isset.pod = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rack);
          this->__isset.rack = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Target::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Target");

  xfer += oprot->writeFieldBegin("hostname", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->hostname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clustertype", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->clustertype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ignore", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->ignore);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cluster", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->cluster);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("v4", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->v4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("v6", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->v6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pod", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->pod);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rack", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->rack);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Target &a, Target &b) {
  using ::std::swap;
  swap(a.hostname, b.hostname);
  swap(a.clustertype, b.clustertype);
  swap(a.ignore, b.ignore);
  swap(a.cluster, b.cluster);
  swap(a.v4, b.v4);
  swap(a.v6, b.v6);
  swap(a.pod, b.pod);
  swap(a.rack, b.rack);
  swap(a.__isset, b.__isset);
}

Target::Target(const Target& other8) {
  hostname = other8.hostname;
  clustertype = other8.clustertype;
  ignore = other8.ignore;
  cluster = other8.cluster;
  v4 = other8.v4;
  v6 = other8.v6;
  pod = other8.pod;
  rack = other8.rack;
  __isset = other8.__isset;
}
Target& Target::operator=(const Target& other9) {
  hostname = other9.hostname;
  clustertype = other9.clustertype;
  ignore = other9.ignore;
  cluster = other9.cluster;
  v4 = other9.v4;
  v6 = other9.v6;
  pod = other9.pod;
  rack = other9.rack;
  __isset = other9.__isset;
  return *this;
}
void Target::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Target(";
  out << "hostname=" << to_string(hostname);
  out << ", " << "clustertype=" << to_string(clustertype);
  out << ", " << "ignore=" << to_string(ignore);
  out << ", " << "cluster=" << to_string(cluster);
  out << ", " << "v4=" << to_string(v4);
  out << ", " << "v6=" << to_string(v6);
  out << ", " << "pod=" << to_string(pod);
  out << ", " << "rack=" << to_string(rack);
  out << ")";
}


Config::~Config() throw() {
}


void Config::__set_ignore_my_samples(const int32_t val) {
  this->ignore_my_samples = val;
}

void Config::__set_pinger_cooldown_time(const int32_t val) {
  this->pinger_cooldown_time = val;
}

void Config::__set_pinger_rate(const int32_t val) {
  this->pinger_rate = val;
}

void Config::__set_pinger_target_port(const int32_t val) {
  this->pinger_target_port = val;
}

void Config::__set_pinger_sender_threads(const int32_t val) {
  this->pinger_sender_threads = val;
}

void Config::__set_pinger_receiver_threads(const int32_t val) {
  this->pinger_receiver_threads = val;
}

void Config::__set_dead_racks_threshold(const int32_t val) {
  this->dead_racks_threshold = val;
}

void Config::__set_base_src_port(const int32_t val) {
  this->base_src_port = val;
}

void Config::__set_src_port_count(const int32_t val) {
  this->src_port_count = val;
}

void Config::__set_socket_buffer_size(const int32_t val) {
  this->socket_buffer_size = val;
}

uint32_t Config::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ignore_my_samples);
          this->__isset.ignore_my_samples = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pinger_cooldown_time);
          this->__isset.pinger_cooldown_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pinger_rate);
          this->__isset.pinger_rate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pinger_target_port);
          this->__isset.pinger_target_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pinger_sender_threads);
          this->__isset.pinger_sender_threads = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pinger_receiver_threads);
          this->__isset.pinger_receiver_threads = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dead_racks_threshold);
          this->__isset.dead_racks_threshold = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->base_src_port);
          this->__isset.base_src_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->src_port_count);
          this->__isset.src_port_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->socket_buffer_size);
          this->__isset.socket_buffer_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Config::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Config");

  xfer += oprot->writeFieldBegin("ignore_my_samples", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->ignore_my_samples);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pinger_cooldown_time", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->pinger_cooldown_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pinger_rate", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->pinger_rate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pinger_target_port", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->pinger_target_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pinger_sender_threads", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->pinger_sender_threads);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pinger_receiver_threads", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->pinger_receiver_threads);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dead_racks_threshold", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->dead_racks_threshold);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("base_src_port", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->base_src_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("src_port_count", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->src_port_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("socket_buffer_size", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->socket_buffer_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Config &a, Config &b) {
  using ::std::swap;
  swap(a.ignore_my_samples, b.ignore_my_samples);
  swap(a.pinger_cooldown_time, b.pinger_cooldown_time);
  swap(a.pinger_rate, b.pinger_rate);
  swap(a.pinger_target_port, b.pinger_target_port);
  swap(a.pinger_sender_threads, b.pinger_sender_threads);
  swap(a.pinger_receiver_threads, b.pinger_receiver_threads);
  swap(a.dead_racks_threshold, b.dead_racks_threshold);
  swap(a.base_src_port, b.base_src_port);
  swap(a.src_port_count, b.src_port_count);
  swap(a.socket_buffer_size, b.socket_buffer_size);
  swap(a.__isset, b.__isset);
}

Config::Config(const Config& other10) {
  ignore_my_samples = other10.ignore_my_samples;
  pinger_cooldown_time = other10.pinger_cooldown_time;
  pinger_rate = other10.pinger_rate;
  pinger_target_port = other10.pinger_target_port;
  pinger_sender_threads = other10.pinger_sender_threads;
  pinger_receiver_threads = other10.pinger_receiver_threads;
  dead_racks_threshold = other10.dead_racks_threshold;
  base_src_port = other10.base_src_port;
  src_port_count = other10.src_port_count;
  socket_buffer_size = other10.socket_buffer_size;
  __isset = other10.__isset;
}
Config& Config::operator=(const Config& other11) {
  ignore_my_samples = other11.ignore_my_samples;
  pinger_cooldown_time = other11.pinger_cooldown_time;
  pinger_rate = other11.pinger_rate;
  pinger_target_port = other11.pinger_target_port;
  pinger_sender_threads = other11.pinger_sender_threads;
  pinger_receiver_threads = other11.pinger_receiver_threads;
  dead_racks_threshold = other11.dead_racks_threshold;
  base_src_port = other11.base_src_port;
  src_port_count = other11.src_port_count;
  socket_buffer_size = other11.socket_buffer_size;
  __isset = other11.__isset;
  return *this;
}
void Config::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Config(";
  out << "ignore_my_samples=" << to_string(ignore_my_samples);
  out << ", " << "pinger_cooldown_time=" << to_string(pinger_cooldown_time);
  out << ", " << "pinger_rate=" << to_string(pinger_rate);
  out << ", " << "pinger_target_port=" << to_string(pinger_target_port);
  out << ", " << "pinger_sender_threads=" << to_string(pinger_sender_threads);
  out << ", " << "pinger_receiver_threads=" << to_string(pinger_receiver_threads);
  out << ", " << "dead_racks_threshold=" << to_string(dead_racks_threshold);
  out << ", " << "base_src_port=" << to_string(base_src_port);
  out << ", " << "src_port_count=" << to_string(src_port_count);
  out << ", " << "socket_buffer_size=" << to_string(socket_buffer_size);
  out << ")";
}


SiteInfo::~SiteInfo() throw() {
}


void SiteInfo::__set_dc(const std::string& val) {
  this->dc = val;
}

void SiteInfo::__set_cluster(const std::string& val) {
  this->cluster = val;
}

void SiteInfo::__set_clustertype(const std::string& val) {
  this->clustertype = val;
}

void SiteInfo::__set_pod(const std::string& val) {
  this->pod = val;
}

void SiteInfo::__set_region(const std::string& val) {
  this->region = val;
}

void SiteInfo::__set_rack(const std::string& val) {
  this->rack = val;
}

void SiteInfo::__set_hostname(const std::string& val) {
  this->hostname = val;
}

void SiteInfo::__set_hostprefix(const std::string& val) {
  this->hostprefix = val;
}

void SiteInfo::__set_ip(const std::string& val) {
  this->ip = val;
}

uint32_t SiteInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dc);
          this->__isset.dc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cluster);
          this->__isset.cluster = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->clustertype);
          this->__isset.clustertype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pod);
          this->__isset.pod = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->region);
          this->__isset.region = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rack);
          this->__isset.rack = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hostname);
          this->__isset.hostname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hostprefix);
          this->__isset.hostprefix = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SiteInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SiteInfo");

  xfer += oprot->writeFieldBegin("dc", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cluster", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->cluster);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clustertype", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->clustertype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pod", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->pod);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("region", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->region);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rack", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->rack);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hostname", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->hostname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hostprefix", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->hostprefix);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SiteInfo &a, SiteInfo &b) {
  using ::std::swap;
  swap(a.dc, b.dc);
  swap(a.cluster, b.cluster);
  swap(a.clustertype, b.clustertype);
  swap(a.pod, b.pod);
  swap(a.region, b.region);
  swap(a.rack, b.rack);
  swap(a.hostname, b.hostname);
  swap(a.hostprefix, b.hostprefix);
  swap(a.ip, b.ip);
  swap(a.__isset, b.__isset);
}

SiteInfo::SiteInfo(const SiteInfo& other12) {
  dc = other12.dc;
  cluster = other12.cluster;
  clustertype = other12.clustertype;
  pod = other12.pod;
  region = other12.region;
  rack = other12.rack;
  hostname = other12.hostname;
  hostprefix = other12.hostprefix;
  ip = other12.ip;
  __isset = other12.__isset;
}
SiteInfo& SiteInfo::operator=(const SiteInfo& other13) {
  dc = other13.dc;
  cluster = other13.cluster;
  clustertype = other13.clustertype;
  pod = other13.pod;
  region = other13.region;
  rack = other13.rack;
  hostname = other13.hostname;
  hostprefix = other13.hostprefix;
  ip = other13.ip;
  __isset = other13.__isset;
  return *this;
}
void SiteInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SiteInfo(";
  out << "dc=" << to_string(dc);
  out << ", " << "cluster=" << to_string(cluster);
  out << ", " << "clustertype=" << to_string(clustertype);
  out << ", " << "pod=" << to_string(pod);
  out << ", " << "region=" << to_string(region);
  out << ", " << "rack=" << to_string(rack);
  out << ", " << "hostname=" << to_string(hostname);
  out << ", " << "hostprefix=" << to_string(hostprefix);
  out << ", " << "ip=" << to_string(ip);
  out << ")";
}


Metadata::~Metadata() throw() {
}


void Metadata::__set_src(const SiteInfo& val) {
  this->src = val;
}

void Metadata::__set_dst(const SiteInfo& val) {
  this->dst = val;
}

void Metadata::__set_ipv6(const bool val) {
  this->ipv6 = val;
}

void Metadata::__set_proto(const std::string& val) {
  this->proto = val;
}

void Metadata::__set_scope(const std::string& val) {
  this->scope = val;
}

void Metadata::__set_tos(const int32_t val) {
  this->tos = val;
}

void Metadata::__set_dead(const bool val) {
  this->dead = val;
}

uint32_t Metadata::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->src.read(iprot);
          this->__isset.src = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dst.read(iprot);
          this->__isset.dst = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ipv6);
          this->__isset.ipv6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->proto);
          this->__isset.proto = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->scope);
          this->__isset.scope = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tos);
          this->__isset.tos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->dead);
          this->__isset.dead = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Metadata::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Metadata");

  xfer += oprot->writeFieldBegin("src", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->src.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dst", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dst.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ipv6", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->ipv6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("proto", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->proto);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scope", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->scope);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tos", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->tos);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dead", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->dead);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Metadata &a, Metadata &b) {
  using ::std::swap;
  swap(a.src, b.src);
  swap(a.dst, b.dst);
  swap(a.ipv6, b.ipv6);
  swap(a.proto, b.proto);
  swap(a.scope, b.scope);
  swap(a.tos, b.tos);
  swap(a.dead, b.dead);
  swap(a.__isset, b.__isset);
}

Metadata::Metadata(const Metadata& other14) {
  src = other14.src;
  dst = other14.dst;
  ipv6 = other14.ipv6;
  proto = other14.proto;
  scope = other14.scope;
  tos = other14.tos;
  dead = other14.dead;
  __isset = other14.__isset;
}
Metadata& Metadata::operator=(const Metadata& other15) {
  src = other15.src;
  dst = other15.dst;
  ipv6 = other15.ipv6;
  proto = other15.proto;
  scope = other15.scope;
  tos = other15.tos;
  dead = other15.dead;
  __isset = other15.__isset;
  return *this;
}
void Metadata::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Metadata(";
  out << "src=" << to_string(src);
  out << ", " << "dst=" << to_string(dst);
  out << ", " << "ipv6=" << to_string(ipv6);
  out << ", " << "proto=" << to_string(proto);
  out << ", " << "scope=" << to_string(scope);
  out << ", " << "tos=" << to_string(tos);
  out << ", " << "dead=" << to_string(dead);
  out << ")";
}


Metrics::~Metrics() throw() {
}


void Metrics::__set_numRecv(const int32_t val) {
  this->numRecv = val;
}

void Metrics::__set_numXmit(const int32_t val) {
  this->numXmit = val;
}

void Metrics::__set_avg(const double val) {
  this->avg = val;
}

void Metrics::__set_rttP90(const double val) {
  this->rttP90 = val;
}

void Metrics::__set_rttP50(const double val) {
  this->rttP50 = val;
}

void Metrics::__set_lossRatio(const double val) {
  this->lossRatio = val;
}

uint32_t Metrics::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numRecv);
          this->__isset.numRecv = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numXmit);
          this->__isset.numXmit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->avg);
          this->__isset.avg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->rttP90);
          this->__isset.rttP90 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->rttP50);
          this->__isset.rttP50 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->lossRatio);
          this->__isset.lossRatio = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Metrics::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Metrics");

  xfer += oprot->writeFieldBegin("numRecv", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->numRecv);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numXmit", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->numXmit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("avg", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->avg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rttP90", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->rttP90);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rttP50", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->rttP50);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lossRatio", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->lossRatio);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Metrics &a, Metrics &b) {
  using ::std::swap;
  swap(a.numRecv, b.numRecv);
  swap(a.numXmit, b.numXmit);
  swap(a.avg, b.avg);
  swap(a.rttP90, b.rttP90);
  swap(a.rttP50, b.rttP50);
  swap(a.lossRatio, b.lossRatio);
  swap(a.__isset, b.__isset);
}

Metrics::Metrics(const Metrics& other16) {
  numRecv = other16.numRecv;
  numXmit = other16.numXmit;
  avg = other16.avg;
  rttP90 = other16.rttP90;
  rttP50 = other16.rttP50;
  lossRatio = other16.lossRatio;
  __isset = other16.__isset;
}
Metrics& Metrics::operator=(const Metrics& other17) {
  numRecv = other17.numRecv;
  numXmit = other17.numXmit;
  avg = other17.avg;
  rttP90 = other17.rttP90;
  rttP50 = other17.rttP50;
  lossRatio = other17.lossRatio;
  __isset = other17.__isset;
  return *this;
}
void Metrics::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Metrics(";
  out << "numRecv=" << to_string(numRecv);
  out << ", " << "numXmit=" << to_string(numXmit);
  out << ", " << "avg=" << to_string(avg);
  out << ", " << "rttP90=" << to_string(rttP90);
  out << ", " << "rttP50=" << to_string(rttP50);
  out << ", " << "lossRatio=" << to_string(lossRatio);
  out << ")";
}


TestResult::~TestResult() throw() {
}


void TestResult::__set_timestamp(const double val) {
  this->timestamp = val;
}

void TestResult::__set_ignore(const bool val) {
  this->ignore = val;
}

void TestResult::__set_metadata(const Metadata& val) {
  this->metadata = val;
}

void TestResult::__set_metrics(const Metrics& val) {
  this->metrics = val;
}

void TestResult::__set_aggregated(const bool val) {
  this->aggregated = val;
}

uint32_t TestResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ignore);
          this->__isset.ignore = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->metadata.read(iprot);
          this->__isset.metadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->metrics.read(iprot);
          this->__isset.metrics = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->aggregated);
          this->__isset.aggregated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TestResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TestResult");

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ignore", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->ignore);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("metadata", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->metadata.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("metrics", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->metrics.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("aggregated", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->aggregated);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TestResult &a, TestResult &b) {
  using ::std::swap;
  swap(a.timestamp, b.timestamp);
  swap(a.ignore, b.ignore);
  swap(a.metadata, b.metadata);
  swap(a.metrics, b.metrics);
  swap(a.aggregated, b.aggregated);
  swap(a.__isset, b.__isset);
}

TestResult::TestResult(const TestResult& other18) {
  timestamp = other18.timestamp;
  ignore = other18.ignore;
  metadata = other18.metadata;
  metrics = other18.metrics;
  aggregated = other18.aggregated;
  __isset = other18.__isset;
}
TestResult& TestResult::operator=(const TestResult& other19) {
  timestamp = other19.timestamp;
  ignore = other19.ignore;
  metadata = other19.metadata;
  metrics = other19.metrics;
  aggregated = other19.aggregated;
  __isset = other19.__isset;
  return *this;
}
void TestResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TestResult(";
  out << "timestamp=" << to_string(timestamp);
  out << ", " << "ignore=" << to_string(ignore);
  out << ", " << "metadata=" << to_string(metadata);
  out << ", " << "metrics=" << to_string(metrics);
  out << ", " << "aggregated=" << to_string(aggregated);
  out << ")";
}

}}} // namespace
